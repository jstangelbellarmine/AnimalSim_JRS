import java.util.*;

public abstract class Animal {

    protected int simID;
    protected Location location;
    protected boolean full;
    protected boolean rested;

    public Animal() {
        this.simID = 0;
        try 
        {
            this.location = new Location(); 
        } 
        catch (Exception e) 
        {
            System.out.println("Error initializing location: " + e.getMessage());
        }
        this.full = false;
        this.rested = true;
    }//end empty-argument constructor

   
    public Animal(int simID, Location l) {
        if (simID <= 0) {
            try 
            {
                throw new InvalidSimIDException("simID cannot be zero or negative.");
            }//end try 
            catch (InvalidSimIDException e) 
            {
                System.out.println("Error with simID: " + e.getMessage());
            }//end catch
        }//end if 
        else 
        {
            this.simID = simID;
        }//end else
        
        this.location = l; 
        this.full = false;
        this.rested = true;
    }//end preferred constructor

   
    public boolean eat() {
        Random r = new Random();
        double p = r.nextDouble();
        this.full = p > 0.5;
        return this.full;
    }//end eat

    
    public boolean sleep() {
        Random r = new Random();
        double p = r.nextDouble();
        this.rested = p > 0.5;
        return this.rested;
    }//end sleep

   
    public int getSimID() {
        return simID;
    }//end getSimID

    public void setSimID(int simID) {
        try {
            if (simID <= 0) {
                throw new InvalidSimIDException("simID cannot be zero or negative.");
            }//end if
            this.simID = simID;
        }//end try 
        catch (InvalidSimIDException e) 
        {
            System.out.println("Error setting simID: " + e.getMessage());
        }//end catch 
    }//end setSimID

    public Location getLocation() {
        return location;
    }//end getLocation

    public void setLocation(Location l) {
        this.location = l; 
    }//end setLocation

    public boolean isFull() {
        return full;
    }//end isFull

    public void setFull(boolean full) {
        this.full = full;
    }//end setFull

    public boolean isRested() {
        return rested;
    }//end isRested

    public void setRested(boolean rested) {
        this.rested = rested;
    }//end setRested

   
    public class InvalidSimIDException extends Exception {
        public InvalidSimIDException(String message) {
            super(message);
        }//end InvalidSimIDException
        
    }//end InvalidSimIDException exception
    
}//end class
