//~~~~~~~~~~~~~~~~~~Programmer's Notes~~~~~~~~~~~~~~~~~~
//In this class, you will find Goldfinch objects that inherit
//from Animal. Goldfinches have a wingSpan between 5-11, can
//walk, and can fly. These actions are created by implementing
//Walkable and Flyable interfaces. 
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
public class Goldfinch extends Animal implements Walkable, Flyable {

    private double wingSpan;
    protected int[] coordinates;
    protected int x;
    protected int y;
    protected int xFlew;
    protected int yFlew;

    public Goldfinch() {
        super(); 
        this.wingSpan = 9.0; 
    }//end empty-argument constructor 

    public Goldfinch(int simID, Location l, double wingSpan) throws InvalidWingspanException {
        super(simID, l);
        this.full = false;
        this.rested = true;
        if (wingSpan < 5.0 || wingSpan > 11.0) {
            throw new InvalidWingspanException("Invalid Wingspan. Please remeasure and remember: minimum wingspan is 5cm and maximum wingspan is 11cm.");
        }
        this.wingSpan = wingSpan;
    }//end preferred constructor

    public void setWingSpan(double wingSpan) {
        try {
            if (wingSpan < 5.0 || wingSpan > 11.0) {
                throw new InvalidWingspanException("Invalid Wingspan. Please remeasure and remember: minimum wingspan is 5cm and maximum wingspan is 11cm.");
            }
            this.wingSpan = wingSpan;
        } 
        catch (InvalidWingspanException e) 
        {
            System.out.println("Error: " + e.getMessage());
        }
    }//end setWingSpan

    public double getWingSpan() {
        return wingSpan;
    }//end getWingSpan

    
    public void walk(int xWalked, int yWalked) {
    	
        Location currentLocation = getLocation();
        int[] coordinates = currentLocation.getCoordinates();
        int x = xWalked + coordinates[0];
        int y = yWalked + coordinates[1];        
        currentLocation.update(x, y);
    }//end walked 
    
    @Override
    public void fly(Location location) {
        int newX = location.getCoordinates()[0];
        int newY = location.getCoordinates()[1];
        getLocation().setCoordinates(newX, newY);
    }
 
    public class InvalidWingspanException extends RuntimeException {
        public InvalidWingspanException(String message) {
            super(message);
        }
    }//end InvalidWingspanException class
    
    @Override
    public String toString() {
        return "Goldfinch [simID=" + getSimID() + ", location=" + getLocation().getCoordinates()[0] + "," + getLocation().getCoordinates()[1] +
               ", full=" + isFull() + ", rested=" + isRested() + ", wingSpan=" + wingSpan + "]";
    }//end toString
    
}//end class
